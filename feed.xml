<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS371p Fall 2015: Lane Kolbly</title>
    <description>Website for CS371P, Object Oriented Programming
</description>
    <link>http://lkolbly.github.io/cs371p-web/</link>
    <atom:link href="http://lkolbly.github.io/cs371p-web/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 06 Sep 2015 21:46:10 -0500</pubDate>
    <lastBuildDate>Sun, 06 Sep 2015 21:46:10 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>The Collatz Algorithm</title>
        <description>&lt;p&gt;First off, shameless plug. Fill out the XKCD survey if you haven&amp;#39;t already:
[&lt;a href=&quot;https://docs.google.com/forms/d/1PhEmGqYI84n6WmqifWf8ExLNe3EVBLcBPs1owYXWfPs/viewform?c=0&amp;amp;w=1&quot;&gt;https://docs.google.com/forms/d/1PhEmGqYI84n6WmqifWf8ExLNe3EVBLcBPs1owYXWfPs/viewform?c=0&amp;amp;w=1&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Week two of my experience in CS371p (Object Oriented Programming). This week we started our first project, a program to find the longest Collatz chain within a range of numbers.&lt;/p&gt;

&lt;p&gt;Not a difficult problem to solve by any stretch of the word.&lt;/p&gt;

&lt;p&gt;But the difficulty in the project lies not in the programming. It lies in the paperwork around the project that we have to do. The goal of this class is not to learn object oriented programming, but to learn the tools of the trade: Git, continuous integration, unit tests, issue tracking, and so forth.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know what the right way to teach these things is. I personally learned them through using them - I went to work at a company. The company used tool XYZ. I learned tool XYZ. I learned Git at WP Engine. I learned testing at Click Security (despite what they may tell you). Even though L5 proved beyond a doubt that freelancing was not what I was meant for, I learned many valuable lessons there about ethics and timekeeping and tests and documentation etc.&lt;/p&gt;

&lt;p&gt;In each of these cases, though, I was in the real world using the tools. I learned how to use issue tracking in a world where we had to track thousands of issues at the same time quickly and efficiently or else the company would fold under its own weight.&lt;/p&gt;

&lt;p&gt;The class attempts to teach issue tracking by forcing us to use an issue tracker. Naively, you might think that&amp;#39;s great. But we&amp;#39;re forced to file a certain number of issues, on a project which we&amp;#39;re working alone on. Issue trackers are not built to track issues, tracking issues is easy and any programmer worth giving a keyboard knows how to keep a TODO list of issues. I personally use a text file, some use post-it notes. Some use an issue tracker for that, there&amp;#39;s nothing wrong with that.&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s be honest, it takes about a second to learn how to use the Github issue tracker.&lt;/p&gt;

&lt;p&gt;The real power of issue tracking is in coordinating people. Imagine you work in a company of about 120-130 people. There are maybe a half-dozen technical teams at said company. Now imagine you are working on a problem where people with Italian names don&amp;#39;t appear in the final product. (by the way, the product consists of a data pipeline where data is piped from the customer, through machinery, and then gets moved to the product team&amp;#39;s territory) You are the person responsible for fixing the problem. What do you do?&lt;/p&gt;

&lt;p&gt;You probably try to identify the problem in the part you have control over, the data pipeline. You look through it, make some notes, and then posit that it is a problem with the product team. So you go over to Jill&amp;#39;s desk and tell her, &amp;quot;Hey, I&amp;#39;ve been working on bug XYZ.&amp;quot; You tell her what you know, she writes it on a post-it, and you part ways as happy workfellows.&lt;/p&gt;

&lt;p&gt;A couple weeks later, maybe it&amp;#39;s on a Wednesday and the company catered BBQ that day. You sit down to your ribs, and Greg sits down across from you and asks, &amp;quot;Hey, so is bug XYZ fixed?&amp;quot;&lt;/p&gt;

&lt;p&gt;You reply, &amp;quot;Dude, I&amp;#39;m eating BBQ, buzz off.&amp;quot;&lt;/p&gt;

&lt;p&gt;Just kidding. You reply, &amp;quot;I don&amp;#39;t know, I gave that to Jill.&amp;quot;&lt;/p&gt;

&lt;p&gt;Greg thanks you and goes to Jill. Jill says she gave it to Jimbo. Jimbo gave it to Kat. Kat got married last weekend and will be off the grid on her honeymoon until late next week.&lt;/p&gt;

&lt;p&gt;So now nobody knows if it&amp;#39;s been fixed. Maybe Kat fixed it but hasn&amp;#39;t committed it yet. Maybe she&amp;#39;s halfway fixed it. Maybe she gave it to someone else in the company.&lt;/p&gt;

&lt;p&gt;Enter the infomercial voiceover. &amp;quot;If you&amp;#39;ve ever had problems like these... Try issue tracking! &lt;small&gt;May cause heart problems or temporary insanity. See your doctor for details.&lt;/small&gt;&amp;quot;&lt;/p&gt;

&lt;p&gt;This is what issue tracking is for, and the in-class projects are (so far) a poor representation of that.&lt;/p&gt;

&lt;p&gt;Note that I&amp;#39;m not espousing any particular way that I think issue tracking should be taught. I think it is impractical for everyone to learn on the job. I have long thought that programming should be taught via a single, large, open-source project. You are graded based on your contributions. End of story.&lt;/p&gt;

&lt;p&gt;Tip of the week: Know the &amp;quot;bus factor&amp;quot;: It&amp;#39;s the number of people that can be hit by a bus before the project fails. A larger number is better. That way, no one person is in charge of too much - if the bus factor is 1 or 2 in a large company (&amp;gt;20 people), then maybe their job encompasses too much.&lt;/p&gt;

&lt;p&gt;As always, assume the buses are smart and malicious.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs371p-web/busfactor.jpg&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/09/06/hotels.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/09/06/hotels.html</guid>
        
        
      </item>
    
      <item>
        <title>First Post</title>
        <description>&lt;p&gt;Welcome to the class.&lt;/p&gt;

&lt;p&gt;They say that a first impression is the strongest impression. I&amp;#39;m currently reading the book &amp;quot;Blink&amp;quot;, by Malcolm Gladwell (author of &amp;quot;The Tipping Point&amp;quot;), which speaks only of this phenomenon for 300 pages. A good read, actually, I highly recommend it, though it does come off a little bit like Stephan Wolfram&amp;#39;s book &amp;quot;A New Kind of Science&amp;quot; (which is also worth reading).&lt;/p&gt;

&lt;p&gt;I digress. What does this have to do with Professor Downing&amp;#39;s class, CS 371P (Object Oriented Programming) at UT?&lt;/p&gt;

&lt;p&gt;Glenn Downing is an award-winning teacher. He&amp;#39;s worked at JPL, Los Alamos, and MCC, he&amp;#39;s won three teaching awards, and he holds a patent in a &amp;quot;System and method for initializing variables in an object-oriented program&amp;quot;. He has a daughter that he&amp;#39;s very proud of, he seems like a great guy to be around, your typical case for teacher of the year.&lt;/p&gt;

&lt;p&gt;Except that he&amp;#39;s wrong.&lt;/p&gt;

&lt;p&gt;Fair warning: I have a personal bias against C++, and I have a personal bias against people who put their curly braces after their return statement:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;int main() {
   cout &amp;lt;&amp;lt; &amp;quot;Hello, world!&amp;quot; &amp;lt;&amp;lt; endl;
   return 0;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How can I trust a Lisp programmer? Although I guess if it were in true Lisp form it&amp;#39;d look more like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(&amp;lt;&amp;lt; (&amp;lt;&amp;lt; cout &amp;quot;Hello, world!&amp;quot;) endl)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m clearly not a Lisp coder, though.&lt;/p&gt;

&lt;p&gt;But on a serious note, putting code into a header file is wrong. It leads to multiple dependency errors in large projects, in the case where you have 2 C++ files, each of which includes the same header, and then the two C++ files are later linked together. Also it&amp;#39;s inefficient, because a change to the code results in recompiling every file that included it, and so forth. I did a quick internet search using Google and someone mentioned cyclical dependencies, which is a good point.&lt;/p&gt;

&lt;p&gt;In the particular case of the class, it only became an issue because of the way gcov aggregates its statistics on a per-file basis, and the makefile for the class was checking the C++ file for the coverage statistics of the function in question, not the header file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gcov -b ./Coverage2.c++ | grep -A 5 &amp;quot;File &amp;#39;Coverage2.c++&amp;#39;&amp;quot;
instead of:
$ gcov -b ./Coverage2.c++ | grep -A 5 &amp;quot;File &amp;#39;Collatz2.h&amp;#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So there&amp;#39;s that. To be fair, it is just one example (four, actually), but strong C/C++ knowledge is not a prereq for this class, so some people may take the idea to heart.&lt;/p&gt;

&lt;p&gt;So while I take issue with the materials that have been presented thus far in class, the teaching style of the class is one I rather like. Professor Downing does the unique practice of calling on people in class and putting them on the spot. I think this practice is wonderful and should be in all classes - it forces a student to think, on the spot, about a problem, like a triage of sorts. I&amp;#39;m not a fan of competitive coding, hackathons, or that type of thing, because I find them too stressful of a hobby (if you want me to be stressed, you have to pay me, a prize is not money in the bank). But one thing that they teach is the ability to triage a situation and go in a direction, and not freeze or over-analyze.&lt;/p&gt;

&lt;p&gt;I should speak some words also about how this class seems to be emphasizing the tools more than the programming itself. Namely, Github, Travis CI, gcov, doxygen, etc. Personally I think any programmer worth their weight in gold [1] should be able to pick up these tools in any given weekend, so a class is pointless.&lt;/p&gt;

&lt;p&gt;So what I see is that I have issues with the material presented in class, but the material is at least well-taught. I opened talking about first impressions - we&amp;#39;ve only had two classes so far, and no homework or projects, so I&amp;#39;m going to keep an open mind and we&amp;#39;ll see how this next (first) project goes.&lt;/p&gt;

&lt;p&gt;A programming tip of the week: If you need to read 1.7 million images into Apache Spark, don&amp;#39;t use binaryFiles on a directory of 1.7 million files. binaryFiles will spend literally hours building a table of all the files and will eventually return an OutOfMemory exception. Instead, base64 encode the files into lines, and put each line into a big gzipped file, and read it with textFiles (you can also have several big gzipped files, and spread the little files across them). The gzipping almost offsets the size expansion of the base64 step, at least in my case.&lt;/p&gt;

&lt;p&gt;Even if you don&amp;#39;t need to load them into Spark, don&amp;#39;t put 1.7 million images into a flat directory anyway, because it takes several minutes to read the directory listing.&lt;/p&gt;

&lt;p&gt;[1] $16,524/LB at time of writing, $3.2 million for the average male and $2.7 million for the average female, which coincidentally matches the lifetime earnings of a male or female ($3.5 million and $2.9 million, respectively) with a PhD, according to &lt;a href=&quot;https://www2.ed.gov/policy/highered/reg/hearulemaking/2011/collegepayoff.pdf&quot;&gt;a 2009 report by the Georgetown University Center on Education and the Workforce&lt;/a&gt; page 10. New theory: Women are discriminated against not because of their gender, but because of their weight.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/08/30/first-post.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/08/30/first-post.html</guid>
        
        
      </item>
    
      <item>
        <title>Hello, World!</title>
        <description>&lt;p&gt;Hi, welcome to Lane Kolbly&amp;#39;s blog for CS371P (Object Oriented Programming)!&lt;/p&gt;

&lt;p&gt;I run this blog because I get extra credit in the class, and this blog is for the class.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/08/29/hello.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/08/29/hello.html</guid>
        
        
      </item>
    
  </channel>
</rss>
