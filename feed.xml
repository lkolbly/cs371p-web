<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS371p Fall 2015: Lane Kolbly</title>
    <description>Website for CS371P, Object Oriented Programming
</description>
    <link>http://lkolbly.github.io/cs371p-web/</link>
    <atom:link href="http://lkolbly.github.io/cs371p-web/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 05 Dec 2015 11:56:22 -0600</pubDate>
    <lastBuildDate>Sat, 05 Dec 2015 11:56:22 -0600</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>The End!</title>
        <description>&lt;p&gt;Now, this is a story all about how&lt;/p&gt;

&lt;p&gt;I learned C++ - I know it&amp;#39;s upside down.&lt;/p&gt;

&lt;p&gt;And I&amp;#39;d like to take a minute&lt;/p&gt;

&lt;p&gt;Just sit right there&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll tell you how Dr. Downing taught C++.&lt;/p&gt;

&lt;p&gt;C++ ain&amp;#39;t a great language.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll give it that. But I wrote a few thousand lines of it this semester, around 3 to be exact. In the past I&amp;#39;ve written well over ten kilolines in that unfortunate language.&lt;/p&gt;

&lt;p&gt;So I came to this class with a working knowledge of C++. This class taught me the details. So that&amp;#39;s one thing.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not worth taking a class to learn a language, though. C++ compilers are freely available, and any programmer worth his or her weight in salt [1] can pick up how to use the STL, references, templated classes, and iterators.&lt;/p&gt;

&lt;p&gt;And anyway, anything you learn today will be either obsoleted by industry or forgotten by you by the time you get a stable job.&lt;/p&gt;

&lt;p&gt;This class also makes reference to unit tests, code coverage tests, and CI. These are all things you can pick up on the job or on your own time. But this is similar to above - not worth taking the whole semester class for a single lecture about these concepts. Sneak in the back of the classroom, the times and rooms are listed in UT&amp;#39;s course schedule.&lt;/p&gt;

&lt;p&gt;But what this class taught me were grownup words, like &lt;em&gt;static binding&lt;/em&gt; or &lt;em&gt;dynamic binding&lt;/em&gt; or &lt;em&gt;replacement overriding&lt;/em&gt; or &lt;em&gt;reflection&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So many fancy words!&lt;/p&gt;

&lt;p&gt;But now I can apply what I learned here to my favorite language, Go! (not to be confused with the Go! language. That was a syntactic exclamation point, not part of the name.)&lt;/p&gt;

&lt;p&gt;I digress.&lt;/p&gt;

&lt;p&gt;If you do take this class, know a little bit about C++. Know how to write a basic program using classes and the STL. Have experience using a source control system (like git or hg, not like folders named project, project1, project2, project_old, etc.), or else you&amp;#39;ll learn it all wrong in this class (you commit source files, not compiled results, don&amp;#39;t let anyone tell you otherwise).&lt;/p&gt;

&lt;p&gt;That said, this class is pretty much a C++-specific class. If you really want to learn object-oriented-programming theory, take a different class. But it is possible to take this class and learn more than C++ workarounds.&lt;/p&gt;

&lt;p&gt;Dr. Downing asked if I thought the class was worth the time. I think so. I&amp;#39;m not convinced it would be worth the advertised 24 hours per week, though. I probably spent about 3 hours a week on lectures and 6 hours a week on the projects, on average. Maybe another 2-3 hours a week writing these blog posts, but that&amp;#39;s probably more time than anyone else spends on their blog posts (though some of them are certainly very well written).&lt;/p&gt;

&lt;p&gt;Disclaimer: I tend to work on the fast side of the average, so your results may vary.&lt;/p&gt;

&lt;p&gt;This class is absolutely worth it if you put in the time. What do I mean? I dunno. If you sleep through lectures and don&amp;#39;t spend every waking moment thinking about the ramifications of what Professor said about how C++ implements dynamic binding, then you&amp;#39;re missing something crucial. Time and time again I have heard that low-level stuff isn&amp;#39;t worth knowing if you deal with the high-level stuff. But if you don&amp;#39;t understand how C++ keeps a field in the class which points to a vtable, how will you understand dynamic binding? If you don&amp;#39;t understand that, what hope is there for when things go terribly wrong?&lt;/p&gt;

&lt;p&gt;This class is worth your time, but it conceals that very well. The projects are very practical, objective, and result-based. The tests have you write code to perform relatively mundane tasks.&lt;/p&gt;

&lt;p&gt;A passing observer may say, by golly! This is just a language class! How useless!&lt;/p&gt;

&lt;p&gt;A student who puts a little time into the class beyond the strict base requirements may say, by golly! This is a concepts class!&lt;/p&gt;

&lt;p&gt;Po-TAY-to. To-MAH-to.&lt;/p&gt;

&lt;p&gt;If you prefer a graphical interpretation of the class, this is a graph of the number of words in my various blog posts over time, categorized by how I felt:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs371p-web/wordcount-graph-labelled.png&quot; alt=&quot;Helpful screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;Tip of the Week: Don&amp;#39;t drink and drive.&lt;/p&gt;

&lt;p&gt;[1] Under a penny, at $50 per ton. I guess the phrase comes from ancient times, when salt was very expensive: I once met a professor who studied ancient economy through salt prices in ancient Greece.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/12/05/over-and-out.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/12/05/over-and-out.html</guid>
        
        
      </item>
    
      <item>
        <title>Male, Seeks Terrible Female Engineer</title>
        <description>&lt;p&gt;This is the end.&lt;/p&gt;

&lt;p&gt;Hold your breath, and count to ten.&lt;/p&gt;

&lt;p&gt;Feel the Earth move, and then...&lt;/p&gt;

&lt;p&gt;...I&amp;#39;ll stop ripping Bond songs for my posts. This one is appropriate because this week marks the end of the final project. The class is over. (there&amp;#39;s a final exam and a few quizzes, but the exam&amp;#39;s only an hour, the quizzes are in-class and there&amp;#39;s only two more classes)&lt;/p&gt;

&lt;p&gt;In contrast to the last project, which was an exercise in designing good programs, this final project (&amp;quot;Life&amp;quot;) was simply an exercise in working around C++ to write good code.&lt;/p&gt;

&lt;p&gt;I will not belabor this point, because this week&amp;#39;s readings were about women in computer science, which is much more interesting topic.&lt;/p&gt;

&lt;p&gt;This class being &amp;quot;Object Oriented Programming&amp;quot;, I would have thought we would treat women as objects, and we would study child objects and how they inherit from their parent objects.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.newyorker.com/magazine/2011/07/11/a-womans-place-ken-auletta&quot;&gt;first article&lt;/a&gt; was about Sheryl Sandberg, famous as the poster child for women in Silicon Valley. The &lt;a href=&quot;https://medium.com/@amyngyn/i-need-terrible-female-engineers-1023a2e973dd#.twwlxb9bk&quot;&gt;second article&lt;/a&gt; was about stereotypes of women trying to enter tech fields.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a large movement going in the tech field at multiple levels to get more women into the field. You hear this in the government, the private sector, and education - so why isn&amp;#39;t it happening?&lt;/p&gt;

&lt;p&gt;The general consensus seems to be that a lot of the &amp;quot;sexism in the workplace&amp;quot; we see is at least partially due to women being timid - In the words of Sheryl Sandberg describing her environment at Google, &amp;quot;the men were getting ahead. The men were banging down the door for new assignments, promotions, the next thing to do, the next thing that stretches them. And the women—not all, most—you talked them into it.&amp;quot;&lt;/p&gt;

&lt;p&gt;The in-class assigned articles appeared to be targeted at the tech-savvy crowd, but they are not the issue. The issue is that women hold themselves back.&lt;/p&gt;

&lt;p&gt;Before I get assassinated by any one of my female friends (all of whom are strong, smart, self-empowered women who are totally capable of killing me and getting away with it), I realize that it would be naive to say &amp;quot;the issue is that women aren&amp;#39;t pushy enough&amp;quot; and stop. The issue is deeper than that. The issue is when we raise our daughters and sons.&lt;/p&gt;

&lt;p&gt;Raising children is a tricky thing, and I can&amp;#39;t say I&amp;#39;ve done it (I do claim some experience with my siblings, though).&lt;/p&gt;

&lt;p&gt;At a middle-school showcase for my sister, my mother had the opportunity to observe an obliviously sexist parent. There was a young girl who was interested in the robotics program at the school, and wanted more information. Her father derisively said &amp;quot;yeah, because that&amp;#39;ll get you a prom date.&amp;quot;&lt;/p&gt;

&lt;p&gt;(For the record, every girl at my high school robotics club attended prom with a date.)&lt;/p&gt;

&lt;p&gt;Imagine that same girl in three years, going to high school. She wants to write an application to get into a prestigious science and technology magnet that will give her the education she needs, but needs some help with her application essay. Will her father help with her application essay? Absolutely, but he probably won&amp;#39;t take it seriously. Probably he will half-heartedly proofread it without thinking she has a chance, or perhaps thinking that it won&amp;#39;t be good for her. She&amp;#39;ll inevitably make some mistake, we all do, and he will miss it because he isn&amp;#39;t fully invested.&lt;/p&gt;

&lt;p&gt;She doesn&amp;#39;t get in, of course, even though she&amp;#39;s certainly qualified but her essay wasn&amp;#39;t as good as the boy&amp;#39;s whose father tutored him on the essay. For the rest of her life she will be haunted by the thought that she wasn&amp;#39;t good enough to be an engineer, she&amp;#39;s only good as decoration on the arm of an engineer at prom.&lt;/p&gt;

&lt;p&gt;You might say this is an isolated example. A single girl with a single sexist parent. And perhaps you say that sexism in a single example is okay, or at least bearable. I mean, there&amp;#39;s nothing we can do about that one guy, right?&lt;/p&gt;

&lt;p&gt;Read this quote from advertising material from a store:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The Boys&amp;#39; Toy Store showcases all the best in action figures, hobbies, construction, blasters, and outdoor play. The Girls&amp;#39; Toy Store is perfect if you&amp;#39;re looking for dolls, plush, dollhouses, and pretend play.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is it just me, or is there a slight gender bias there?&lt;/p&gt;

&lt;p&gt;So you argue, hey, that&amp;#39;s just one company, it&amp;#39;s not like they&amp;#39;re the largest Internet-based retailer in the United States or anything.&lt;/p&gt;

&lt;p&gt;Oh, wait, they are. Nevermind.&lt;/p&gt;

&lt;p&gt;Gender equality will not be solved by telling programmers to put women on equal footing with men, either by raising them up or by taking off of their pedestal [1]. I&amp;#39;ve met lots of programmers, and I have found in general that they put women on an equal footing [2].&lt;/p&gt;

&lt;p&gt;The issue is with society.&lt;/p&gt;

&lt;p&gt;To be fair, there is some positive motion occurring. &amp;quot;Skyfall&amp;quot; recently had MI6 put a woman behind a sniper rifle in the field, something that would never have happened 50 years ago.&lt;/p&gt;

&lt;p&gt;Barbie has an &lt;a href=&quot;https://www.youtube.com/watch?v=l1vnsqbnAkk&quot;&gt;adorable commercial&lt;/a&gt;, which I thought was adorable up to the last few seconds where they said &amp;quot;...therefore, buy Barbie!&amp;quot;&lt;/p&gt;

&lt;p&gt;The Barbie commercial seems to say something like &amp;quot;girls who play with Barbie dolls are not required to imagine themselves in traditional (50s) gender roles.&amp;quot; Which is fine. But the common argument is that girls are still being imprinted with the idea that they must be flawlessly beautiful models in order to be successful, whether as a housewife or as a doctor or as a programmer [3].&lt;/p&gt;

&lt;p&gt;Which really isn&amp;#39;t the ultimate goal. But then do we ban beautiful people in the media and move to a &lt;a href=&quot;http://www.tnellen.com/cybereng/harrison.html&quot;&gt;Harrison Bergeron&lt;/a&gt;-esque dystopia? Society likes  beautiful people that fits it&amp;#39;s mold. I comb my hair and wear nice clothes for job interviews. This sets me apart from people who don&amp;#39;t. Is this discrimination against people who don&amp;#39;t like ties?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know what the right answer to society&amp;#39;s problems are. Until I find out, I&amp;#39;m just going to sit here and tweet &amp;quot;#femalecareersmatter&amp;quot; and feel good about me.&lt;/p&gt;

&lt;p&gt;Tip of the Week: Take the &lt;a href=&quot;https://implicit.harvard.edu/implicit/takeatest.html&quot;&gt;Implicit Association Test&lt;/a&gt;. It&amp;#39;s a test design to measure subconscious (sexist/racist/etc.) biases.&lt;/p&gt;

&lt;p&gt;You never know when you might make a sexist implication without even realizing it, and it&amp;#39;s all we can do to try to head off that possibility before it happens.&lt;/p&gt;

&lt;p&gt;Maybe I&amp;#39;m just paranoid because I read Malcolm Galdwell&amp;#39;s Blink, which is a scary book if nothing else. Certainly worth a read, though.&lt;/p&gt;

&lt;p&gt;Another Tip of the Week: Never ever try to edit a blog post (or anything) on a single-spaced printout. Also never try to edit anything using a printer that prints streaks on the paper.&lt;/p&gt;

&lt;p&gt;Yes, I am old school and edit using paper. It&amp;#39;s better that way.&lt;/p&gt;

&lt;p&gt;[1] Gender identity in ancient Roman literature is interesting if you&amp;#39;re into women on pedestals.&lt;/p&gt;

&lt;p&gt;[2] Except maybe for the ones that rape 1 in 5 college women? I&amp;#39;ve never understood how that worked. Are there a few individuals that rape a lot of people and never get caught, or is it more distributed? I&amp;#39;ve always assumed the former, but I don&amp;#39;t know. I thought of a joke involving college fraternities and ISIS, but I won&amp;#39;t say it.&lt;/p&gt;

&lt;p&gt;Yet women outnumber men in degree-granting 4-year programs by 30%? Something isn&amp;#39;t adding up. If I thought there was a 20% chance of me being physically assaulted by going to UT, I can tell you what career I would have and it would involve me cooking french fries (I&amp;#39;ve never had much aptitude for flipping burgers). Or I would wait until I&amp;#39;m 21 and can get my concealed carry license, since that&amp;#39;s legal now.&lt;/p&gt;

&lt;p&gt;[3] The Mattel corporation has other issues, but that has fun side effects: &lt;a href=&quot;https://cfiesler.files.wordpress.com/2014/11/barbieremixed.pdf&quot;&gt;https://cfiesler.files.wordpress.com/2014/11/barbieremixed.pdf&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/11/22/male-seeks-female-engineer.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/11/22/male-seeks-female-engineer.html</guid>
        
        
      </item>
    
      <item>
        <title>Agilecat</title>
        <description>&lt;p&gt;If you come seeking light-hearted poetry, stop now and go to last week&amp;#39;s post. This week I have only prose about Agile and a little bit about C++.&lt;/p&gt;

&lt;p&gt;To give credit where credit is due: The lyrical structure of last week&amp;#39;s post was written by Sam Smith, who recently wrote a song: &lt;a href=&quot;https://www.youtube.com/watch?v=auXMPle74To&quot;&gt;https://www.youtube.com/watch?v=auXMPle74To&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe I should start doing more poetry. Because I could not write C++, C++ kindly wrote for me? I dunno.&lt;/p&gt;

&lt;p&gt;Friday in class I had an epiphany: C++ was written like C, in the sense that you can intimately control the mechanics of classes.&lt;/p&gt;

&lt;p&gt;With this in mind, C++ starts to make a lot of sense.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all I have about C++. This week&amp;#39;s reading was about various development strategies and the practice of continuous integration. CI should be done everywhere, no exceptions.&lt;/p&gt;

&lt;p&gt;Agile has been referred to as &amp;quot;The New Methodology&amp;quot;, which I feel puts a slight bias towards it. It&amp;#39;s &amp;quot;New&amp;quot;! It must also be Shiny and Good!&lt;/p&gt;

&lt;p&gt;The essay we read (&lt;a href=&quot;http://www.martinfowler.com/articles/newMethodology.html&quot;&gt;http://www.martinfowler.com/articles/newMethodology.html&lt;/a&gt;) makes a pretty decent argument that &amp;quot;Agile&amp;quot; programming is the appropriate way to code if you don&amp;#39;t have any requirements. Unfortunately, &amp;quot;Agile&amp;quot; doesn&amp;#39;t really mean anything, although I guess it&amp;#39;d be like most marketing terms in that respect. &amp;quot;Synergy&amp;quot; comes to mind. &amp;quot;Agile&amp;quot; just refers to any programming practice that&amp;#39;s full of coders who don&amp;#39;t know what they&amp;#39;re doing, so they make it up as they go. They formalize it in these &amp;quot;sprints&amp;quot;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not against that practice per se, that&amp;#39;s how it&amp;#39;s been done everywhere I&amp;#39;ve worked. I am against using rediculous terms for no reason.&lt;/p&gt;

&lt;p&gt;For instance, &amp;quot;information radiator&amp;quot;, which is just convoluted jargon for &amp;quot;post-it notes.&amp;quot; Maybe some of us should get together and synergize to construct an information radiator that clearly and concisely communicates informational messages about the convolution appearing on the &amp;quot;Agile Software Development&amp;quot; portion of the globally-distributed-editing paradigm existant on the decentralized topography of the Internet.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m surprised nobody else has done this already.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m also against pair programming. In this class we get a lot of experience programming in pairs. My experience has been that pair programming helps for the first two hours (or thereabouts), and then becomes pointless. In these first two hours, the design is fleshed out and very little useful code is written.&lt;/p&gt;

&lt;p&gt;After the first two hours, it becomes one person implementing trivial functions while the other person tries not to fall asleep.&lt;/p&gt;

&lt;p&gt;Take this code from a previous project for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TEST(SpeciesFixture, species_handles_label) {
    Species s(1);
    s.addLabel(&amp;quot;start&amp;quot;);
    s.addInstruction(Hop, 0);
    s.addInstruction(Goto, &amp;quot;start&amp;quot;);
    int pc = 0;
    struct VisibleState vs;
    vs.empty_ahead = false;
    vs.wall_ahead = false;
    vs.enemy_ahead = false;
    ASSERT_EQ(s.execute(pc, vs), HopAction);
    ASSERT_EQ(s.execute(pc, vs), HopAction);
    ASSERT_EQ(pc, 1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code tests to see whether labels work in our instruction executor (&amp;quot;Species&amp;quot;).&lt;/p&gt;

&lt;p&gt;Once you say that single line of English, it doesn&amp;#39;t matter what the code looks like. It doesn&amp;#39;t help to have a second person watching someone write it. If one person writes it, she will compile it and see if it works. Having a second person only slows her down: A second person might say, &amp;quot;well, all the vs. lines could be combined into one line,&amp;quot; and now she has to stop and they have to have a conversation about which is better.&lt;/p&gt;

&lt;p&gt;Once you get past the high-level design, two people at a computer stops being useful. Some people say that it helps reduce bugs, but so does good design and good testing.&lt;/p&gt;

&lt;p&gt;For example, the &lt;a href=&quot;http://www.fastcompany.com/28121/they-write-right-stuff&quot;&gt;Space Shuttle Software Group&lt;/a&gt; does not use pair programming, but rather uses good initial design. They have, on average, 1.5 bugs per software release (280,000 lines of code per bug) compared to the average commercial software which has 5000 bugs per software release (84 lines of code per bug).&lt;/p&gt;

&lt;p&gt;One could argue that the SSSG is exceptional, and they are, that&amp;#39;s true. They&amp;#39;re also in a somewhat different industry that demands a more safety-critical approach than, say, a video game engineering team.&lt;/p&gt;

&lt;p&gt;Point is, don&amp;#39;t promulgate pair programming. It&amp;#39;s just as effective as having one person write the code, then having another review it via a pull request.&lt;/p&gt;

&lt;p&gt;Which leads me to the Tip of the Week: Know how to review code! Also know what a pull request is. Unfortunately you don&amp;#39;t learn these things in this class (CS371p), but perhaps find an open source project on Github (there&amp;#39;s at least &lt;a href=&quot;https://github.com/cuberite/cuberite&quot;&gt;one that uses C++&lt;/a&gt;) and contribute or, if you don&amp;#39;t feel like doing that, spend some time away from your Life partner submitting PRs (you&amp;#39;re allowed to spend 25% of your time on the project coding separately, more if you&amp;#39;re willing to lie).&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/11/14/sammy.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/11/14/sammy.html</guid>
        
        
      </item>
    
      <item>
        <title>Unit Tests</title>
        <description>&lt;p&gt;I&amp;#39;ve been here before.&lt;/p&gt;

&lt;p&gt;But never hit a wall.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve spent a lifetime coding.&lt;/p&gt;

&lt;p&gt;And I always get it done.&lt;/p&gt;

&lt;p&gt;But with you I&amp;#39;m coding something&lt;/p&gt;

&lt;p&gt;that makes me have to test.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m prepared for this.&lt;/p&gt;

&lt;p&gt;I never shoot to test.&lt;/p&gt;

&lt;p&gt;But I feel like a storm is coming.&lt;/p&gt;

&lt;p&gt;If I&amp;#39;m gonna make it to an A,&lt;/p&gt;

&lt;p&gt;then there&amp;#39;s no more use in running&lt;/p&gt;

&lt;p&gt;this is something I gotta face.&lt;/p&gt;

&lt;p&gt;If I risk it all,&lt;/p&gt;

&lt;p&gt;could you curve my Fall?&lt;/p&gt;

&lt;p&gt;How do I live? How do I breathe?&lt;/p&gt;

&lt;p&gt;When you&amp;#39;re here I&amp;#39;m test writing.&lt;/p&gt;

&lt;p&gt;I want to write code, run through my lines,&lt;/p&gt;

&lt;p&gt;tell me is this where I lose all my points?&lt;/p&gt;

&lt;p&gt;For you I have to test it all&lt;/p&gt;

&lt;p&gt;&amp;#39;cause the writing&amp;#39;s on the wall.&lt;/p&gt;

&lt;p&gt;A million lines of tests&lt;/p&gt;

&lt;p&gt;That haunt us from the spec,&lt;/p&gt;

&lt;p&gt;As the stars begin to gather,&lt;/p&gt;

&lt;p&gt;and the light begins to fade,&lt;/p&gt;

&lt;p&gt;when all hope begins to shatter,&lt;/p&gt;

&lt;p&gt;know that I&amp;#39;ll still write tests.&lt;/p&gt;

&lt;p&gt;If I risk it all,&lt;/p&gt;

&lt;p&gt;could you curve my Fall?&lt;/p&gt;

&lt;p&gt;How do I live? How do I breathe?&lt;/p&gt;

&lt;p&gt;When you&amp;#39;re here I&amp;#39;m test writing.&lt;/p&gt;

&lt;p&gt;I want to write functions, not silly tests,&lt;/p&gt;

&lt;p&gt;tell me is this worth three unit tests?&lt;/p&gt;

&lt;p&gt;For you I have to test it all&lt;/p&gt;

&lt;p&gt;&amp;#39;cause the writing&amp;#39;s in the spec.&lt;/p&gt;

&lt;p&gt;The writing&amp;#39;s in the spec.&lt;/p&gt;

&lt;p&gt;How do I live? How do I breathe?&lt;/p&gt;

&lt;p&gt;When you&amp;#39;re here I&amp;#39;m test writing.&lt;/p&gt;

&lt;p&gt;I want to write code, not many silly tests,&lt;/p&gt;

&lt;p&gt;tell me is this industry standard?&lt;/p&gt;

&lt;p&gt;How do I live? Tip of the week:&lt;/p&gt;

&lt;p&gt;When you&amp;#39;re writing APIs, use the API.&lt;/p&gt;

&lt;p&gt;Know the useful parts, cut out the rest,&lt;/p&gt;

&lt;p&gt;tell me what&amp;#39;s an unused interface?&lt;/p&gt;

&lt;p&gt;For this you have to use it all&lt;/p&gt;

&lt;p&gt;&amp;#39;cause the user&amp;#39;s at the end.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/11/08/pear-programming.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/11/08/pear-programming.html</guid>
        
        
      </item>
    
      <item>
        <title>Design</title>
        <description>&lt;p&gt;Well, snap.&lt;/p&gt;

&lt;p&gt;Last week I railed against this class because it&amp;#39;s a language class.&lt;/p&gt;

&lt;p&gt;This week our project focuses on design, though. The goal of the project is to write a program that does something or other - the details don&amp;#39;t matter. What matters is that our project architecture is what&amp;#39;s under scrutiny. At least, more so.&lt;/p&gt;

&lt;p&gt;In past projects, the project architecture was prescribed to us. We were to have a specific API for specific functions, and that&amp;#39;s it. Here we design the API, and the project is big enough that it isn&amp;#39;t crazy to have multiple components.&lt;/p&gt;

&lt;p&gt;For instance, in the Allocator project, we had to lay out the heap in a specific way and perform specific actions when allocate and deallocate are called.&lt;/p&gt;

&lt;p&gt;Now I&amp;#39;m in a tough position when I answer questions on the class discussion board (Piazza). People will ask, &amp;quot;can I build class XYZ like such-and-such?&amp;quot;&lt;/p&gt;

&lt;p&gt;The answer is yes, always. You can do whatever you want. In past projects, it was the case that you couldn&amp;#39;t - you had to do it a specific way, like in the Allocator project.&lt;/p&gt;

&lt;p&gt;The answer is that you shouldn&amp;#39;t, ninety percent of the time.&lt;/p&gt;

&lt;p&gt;So how do you answer the queston? On the one hand, there really isn&amp;#39;t a single &amp;quot;right&amp;quot; or &amp;quot;best&amp;quot; answer. On the other hand, some answers are substantively worse than others. In my algorithms class, there was an uproar because of two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This was that teacher&amp;#39;s first semester, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We&amp;#39;re expected to know English.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a sense, design is like the English language - it&amp;#39;s highly subjective. Should I use hyphens and rhetorical questions? (or, heck, should I even parenthesize?) A lot of people enjoy in classes easy tests and objective grading. These are both antithetical to programming, the first one on more personal grounds.&lt;/p&gt;

&lt;p&gt;Code can be written densely, with single-letter variables and no comments. Or it can be written overly verbosely, with twenty lines of comments for every line of source and every variable is named something like the&lt;em&gt;iterator&lt;/em&gt;for&lt;em&gt;the&lt;/em&gt;loop&lt;em&gt;which&lt;/em&gt;counts&lt;em&gt;to&lt;/em&gt;n.&lt;/p&gt;

&lt;p&gt;Each of these pieces of code can be equally valid, trivially producing identical machine code. But both of these are bad code, and there is a happy middle ground. I have never seen this middle ground quantified in a code quality grade.&lt;/p&gt;

&lt;p&gt;A lot of classes (including this class, OOP) dedicate a few points for code quality. But I&amp;#39;ve never heard of losing points for that. I don&amp;#39;t remember ever losing points for that, and I&amp;#39;ve written some pretty gnarly code. The people who I&amp;#39;ve known who have lost points on &amp;quot;code quality&amp;quot; typically went and whined at the professor and got their points back.&lt;/p&gt;

&lt;p&gt;So this class claims to be focusing at least in part on the design. The lectures do, don&amp;#39;t get me wrong. But we&amp;#39;ll see whether it gets graded objectively.&lt;/p&gt;

&lt;p&gt;Of course, one problem with subjective grading is that we have a class of a million people (it seems). So there&amp;#39;s that.&lt;/p&gt;

&lt;p&gt;Tip Of The Week: Spectre comes out on Thursday! We&amp;#39;ll see if Voldemort/M is everything he&amp;#39;s cracked up to be.&lt;/p&gt;

&lt;p&gt;Wait, wrong tip of the week. Let&amp;#39;s try that again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mp3gain.sourceforge.net/&quot;&gt;http://mp3gain.sourceforge.net/&lt;/a&gt; is a program that will losslessly volume-equalize a folder full of MP3 files. It even works on Linux.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll let the reader guess how these two are related.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/11/01/design.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/11/01/design.html</guid>
        
        
      </item>
    
      <item>
        <title>Spring 2016</title>
        <description>&lt;p&gt;Dear Reader,&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re reading this, then you&amp;#39;re either taking this class in Fall 2015 or you&amp;#39;re considering taking it this coming Spring, 2016.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re considering registering for CS371p, Object Oriented Programming with Downing, G., then good for you. You&amp;#39;re going to learn C++.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all I can promise you. This is either good news or bad news, depending on your opinions.&lt;/p&gt;

&lt;p&gt;Dr. Downing does an excellent job teaching C++, and is truly an excellent lecturer in many ways. The projects are easy, and the tests are straightforward, so if these are qualities that you like in a class then by all means take it.&lt;/p&gt;

&lt;p&gt;If you want to learn about anything other than C++, then abandon all hope, ye you enter here. This is not a theory class, do not expect to learn anything that can be applied anywhere else. If you are of the opinion that going to lecture for 3 hours a week to learn a new programming language is silly, because either a) you think that juniors in a CS program should be able to pick up a new language without someone spoon-feeding it to them, or b) you think that C++ will be obsolete in a few years, then don&amp;#39;t take this class.&lt;/p&gt;

&lt;p&gt;If you think (b), then our hopes are aligned, but unfortunately far-fetched. C++ has been around longer than you or I.&lt;/p&gt;

&lt;p&gt;So, there you have it. These are my thoughts on the class shrunk to 250 words.&lt;/p&gt;

&lt;p&gt;Tip of the Week: &lt;a href=&quot;http://www.multicore-association.org/workgroup/mpp.php&quot;&gt;http://www.multicore-association.org/workgroup/mpp.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ability to program multi-core systems is crucial as humanity hits the computational speed barrier. We&amp;#39;re at 16nm now in iPads, chips can only become so small. A group of people got together and made this platform-agnostic guide to programming on multi-core systems. It condenses the material well if you&amp;#39;re into that sort of thing (namely, programming for performance).&lt;/p&gt;

&lt;p&gt;Unfortunately, you do have to give them your email address to get the PDF. It&amp;#39;s probably elsewhere on the internet if you searched around, though.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/25/registration.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/25/registration.html</guid>
        
        
      </item>
    
      <item>
        <title>Participado Potato</title>
        <description>&lt;p&gt;Little to report this week. I was unable to attend class on Monday because I was physically ill, so I can&amp;#39;t report on what shenanigans happened that day.&lt;/p&gt;

&lt;p&gt;We got the scores back for the test, so that&amp;#39;s good. I did approximately as well as I figured I would, so no complaints there.&lt;/p&gt;

&lt;p&gt;Refresher: Downing will, throughout the lecture (in fact, for the majority of the lecture), call on students and ask them questions about code, carefully probing their knowledge about the code snippet.&lt;/p&gt;

&lt;p&gt;On Wednesday, Professor Downing called on me in class and we talked about how constructors and destructors are used in arrays. This is noteworthy in part because he called on me last week as well. Last week I was the recipient of a 15 minute conversation about Java&amp;#39;s nested class system as compared to C++&amp;#39;s (or maybe vice-versa). I don&amp;#39;t know how Downing decides who to call on next, but I have noticed that his die seems to land on me unusually often...&lt;/p&gt;

&lt;p&gt;What&amp;#39;s surprising to me is that not everybody loves this part of class the most. There exist (hypothetical, I&amp;#39;m not naming names) people who, when called on, refuse to raise their hands and will hide. On the one hand, I can understand this, the first time I was called on I was nervous.&lt;/p&gt;

&lt;p&gt;But on the other hand, it&amp;#39;s an opportunity for someone who gets paid on the order of $161 an hour [1] to personally explain to you some part of how C++ works, and you don&amp;#39;t even have to show up to office hours.&lt;/p&gt;

&lt;p&gt;Also, it&amp;#39;s good practice to speak in public about code, which is nothing if not important. Confidence is a good thing to build.&lt;/p&gt;

&lt;p&gt;With that, I leave you with my Tip of the Week: Learn to write well [2]. Proofread your work, ideally have a friend do so as well, and most importantly, read other people&amp;#39;s writing. Nothing is more frusterating than having to read something that was poorly written.&lt;/p&gt;

&lt;p&gt;[1] Judging from &lt;a href=&quot;https://sp.austin.utexas.edu/sites/ut/rpt/Documents/IMA_FS_AvgFacSalColRankEXP_2013_AY.pdf&quot;&gt;the University of Texas at Austin Average Faculty Salaries, Headcount, and FTE&lt;/a&gt;. Average salary of a Computer Science professor is $145 thousand annually. Professor Downing teaches four classes, for a total of 10 credit hours, and he approximately doubles that time in office hours, so he works at least 20 hours a week (I don&amp;#39;t count grading and preparing for class and all that stuff, but he has a team of people to do some of that for him). Figuring he works 50 weeks a year, it comes out to around $161 hourly.&lt;/p&gt;

&lt;p&gt;[2] I used to have a lead-in to this topic that involved international terrorists, Hitler, and President Clinton. It was too long, though, so you&amp;#39;ll just have to imagine what it was.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/18/cameras.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/18/cameras.html</guid>
        
        
      </item>
    
      <item>
        <title>Check, 1, 2, 3...</title>
        <description>&lt;p&gt;A few things of importance happened this week: We had the first test.&lt;/p&gt;

&lt;p&gt;The test was, I thought, a reasonable test. Last semester in 439 our tests lacked code. The questions were all conceptual, and in general asked us to apply what we had learned in class to given problems. For example a question might be analogous to &amp;quot;How would you design a file system for a given system?&amp;quot;&lt;/p&gt;

&lt;p&gt;I liked those tests, because if there&amp;#39;s one thing I don&amp;#39;t see a lot of in CS classes it&amp;#39;s system design.&lt;/p&gt;

&lt;p&gt;However, this test was the exact opposite. It was entirely code. There were five questions, and each was of the form &amp;quot;write a function/class that conforms to these unit tests.&amp;quot;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m of two minds on this type of test. On the one hand, it tests knowledge of syntax and whatnot. That&amp;#39;s certainly important, but on the test I made a critical mistake that having a compiler would have caught immediately (an off-by-one error that would cause an out-of-bounds access, if you must know).&lt;/p&gt;

&lt;p&gt;Hopefully my comment here doesn&amp;#39;t cause the people grading the test to realize they missed something and go back to re-grade it down.&lt;/p&gt;

&lt;p&gt;On the other hand, though, it is claimed that the test is largely graded by computer. Which is awesome. Frankly though, if the test can be graded largely by computer, then I think maybe it&amp;#39;s better suited for an Intro to Programming class. We&amp;#39;re largely Juniors and Seniors, I think, we should all know how to make a program compile. The big issue is stylistic stuff.&lt;/p&gt;

&lt;p&gt;I will reserve any judgement until we see how the test was graded. If they count off for semicolons than the acid rain of my criticism will scour the planet clean of life forms [1].&lt;/p&gt;

&lt;p&gt;Tip of the Week: Don&amp;#39;t commit non-source files to git, and don&amp;#39;t commit large binary files to git. These just clog up your repo.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve already said that, so I will have a Tip of the Week 2: Know how your VCS of choice works. In particular: &lt;a href=&quot;https://developer.atlassian.com/blog/2015/01/a-better-pull-request/&quot;&gt;https://developer.atlassian.com/blog/2015/01/a-better-pull-request/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[1] If it hasn&amp;#39;t already. A colleague of mine once described my writing as &amp;quot;dripping with hatred&amp;quot;, which wasn&amp;#39;t really what I was going for. Maybe that explains why another friend of mine (&lt;a href=&quot;https://www.youtube.com/watch?v=_Avn2nT16FA&quot;&gt;Emperor Palpatine&lt;/a&gt;) really liked my blog posts.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/10/columbine.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/10/columbine.html</guid>
        
        
      </item>
    
      <item>
        <title>The Minority Report</title>
        <description>&lt;p&gt;The creator of C++ (Bjarne Stroustrup) once said: &amp;quot;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&amp;quot;&lt;/p&gt;

&lt;p&gt;This week we covered more about templates and we started covering lambda functions.&lt;/p&gt;

&lt;p&gt;I personally like lambda functions. Sometimes, it is handy to have a full function that you can toss around to different functions. The C++ standard library&amp;#39;s accumulat() and all_of() functions both take a function as a parameter. In a language like Python that lambda would be restricted to a single statement, and scoping becomes a little less clear. C++ fixes these problems and allows arbitrarily sized lambdas with clearly scoped variables.&lt;/p&gt;

&lt;p&gt;Unfortunately, lambdas went the way of templates, and maybe could&amp;#39;ve had a little more thought put into them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;

function&amp;lt;int(int)&amp;gt; foo()
{
  int i = 2;
  return [&amp;amp;i] (int x) -&amp;gt; int {return i+x+1;};
}

int main(int argc, char **argv)
{
  function&amp;lt;int(int)&amp;gt; fn = foo();
  cout &amp;lt;&amp;lt; fn(5) &amp;lt;&amp;lt; endl;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prints out 6 on my machine. There are many camps on language design. The camp I belong to believes that the language should protect the coder in a case like this, using what JavaScript does with closures or Python with reference counting.&lt;/p&gt;

&lt;p&gt;This blog is about the class, not the language, so I shall tie it together: This class is making me think about language design more than any other class I&amp;#39;ve taken. I don&amp;#39;t like C++. But the professor makes an argument for it, and it makes me think hard about what it is that I like and don&amp;#39;t like in languages.&lt;/p&gt;

&lt;p&gt;This is one thing I like about this class. It makes you to think.&lt;/p&gt;

&lt;p&gt;Tip of the Week: Have experience writing big projects from scratch (&amp;gt;2000 lines, and multiple files). Most classes value good code but don&amp;#39;t teach architecture, but having a good architecture is more important. Good architecture leads to good code. Bad architecture leads to code that has to work around the program it&amp;#39;s living in, and it becomes more of a headache the further you get down the line.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/04/interface.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/04/interface.html</guid>
        
        
      </item>
    
      <item>
        <title>Sillyscopes!</title>
        <description>&lt;p&gt;Our good friend Glenn Downing (who also happens to teach this class) read my previous post on this blog and pointed to:
[&lt;a href=&quot;http://codeforces.com&quot;&gt;http://codeforces.com&lt;/a&gt;]
and
[&lt;a href=&quot;https://www.hackerrank.com&quot;&gt;https://www.hackerrank.com&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;He teaches a competitive programming course which uses codeforces.com, and that website looked pretty cool.&lt;/p&gt;

&lt;p&gt;We venture forward to this most recent week. This week we got our running grades for the semester back.&lt;/p&gt;

&lt;p&gt;Most classes would give you just a single number, your average score. That number usually ends up being meaningless anyways because they&amp;#39;re averaged poorly or because of curves.&lt;/p&gt;

&lt;p&gt;In this class we got not only our points, but our Z-score in the class (standard deviations above or below the mean) as well as our class rank.&lt;/p&gt;

&lt;p&gt;There are 78 people who are better than me. It was 77 this morning, but then someone got another point or something. Oddly there weren&amp;#39;t any grades entered, that I&amp;#39;m aware of. One wonders.&lt;/p&gt;

&lt;p&gt;This is a class where the rich get richer, and the poor get poorer, because the rich prey on the poor.&lt;/p&gt;

&lt;p&gt;There are those who can write beautiful code right out of the box. Their code is modular, short, relatively clear, and works. When they write test cases, they cover the corners. Their code is bullet-proof.&lt;/p&gt;

&lt;p&gt;Then there are those who... maybe aren&amp;#39;t quite there yet. Their code is cobbled together and has a few bugs. Maybe they didn&amp;#39;t quite think of everything in their tests.&lt;/p&gt;

&lt;p&gt;This class has a system where your program is run against the acceptance test of a randomly chosen student. If your program fails, you lose two points and they gain two points. This is repeated 5 times (you can lose or gain up to 10 points).&lt;/p&gt;

&lt;p&gt;The people at the top will be more likely to get points than those at the bottom. This is fine, but it&amp;#39;s very cutthroat (which is why I dislike competitive programming).&lt;/p&gt;

&lt;p&gt;I got two points from this system. I like having more points. But along the way I put down 5 people (1 person lost 2 points because of me, and I passed ~4 people in the class rank).&lt;/p&gt;

&lt;p&gt;Personally, I feel like directly transferring points from worse students to better students works against the goal. The goal is for everyone to learn - and ideally everyone helps everyone learn. With this point system now we have a reason to not help (nay, mislead) our fellow students. With a class this big (~170 people), people are faceless and it&amp;#39;s hard to feel guilty.&lt;/p&gt;

&lt;p&gt;Tip of the Week: Keep track of why you do things.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m in CS378 Embedded Systems with Dr. Oshana, which is the best class ever and you should totally ditch OOP and go for it [1], but this week we&amp;#39;re doing a project wherein we have to write a command line interpreter for an embedded system (via UART). Somebody on the class discussion forum was getting an error code which I vaguely recognized. I looked at what I had done and noticed this line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;         console_printf(&amp;quot;%s &amp;quot;, g_command_line.prompt);
-    } else if (c == &amp;#39;\b&amp;#39;) {
+    } else if (c == &amp;#39;\b&amp;#39; || c == 127) {
        if (g_command_line.buffer_cursor &amp;gt; g_command_line.buffer) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I must have changed something about backslash. But for the life of me, I don&amp;#39;t remember what I changed or why.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s no use to anybody else.&lt;/p&gt;

&lt;p&gt;So, use version control and issue tracking. It&amp;#39;ll save you from having to remember.&lt;/p&gt;

&lt;p&gt;[1] I might be biased because I like C and robots and I don&amp;#39;t like C++. One class has C and robots (well, a smart car) and the other has C++. My biases should be obvious.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/09/26/sillyscopes.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/09/26/sillyscopes.html</guid>
        
        
      </item>
    
  </channel>
</rss>
