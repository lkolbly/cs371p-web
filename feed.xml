<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS371p Fall 2015: Lane Kolbly</title>
    <description>Website for CS371P, Object Oriented Programming
</description>
    <link>http://lkolbly.github.io/cs371p-web/</link>
    <atom:link href="http://lkolbly.github.io/cs371p-web/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Nov 2015 19:56:10 -0600</pubDate>
    <lastBuildDate>Sun, 01 Nov 2015 19:56:10 -0600</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Design</title>
        <description>&lt;p&gt;Well, snap.&lt;/p&gt;

&lt;p&gt;Last week I railed against this class because it&amp;#39;s a language class.&lt;/p&gt;

&lt;p&gt;This week our project focuses on design, though. The goal of the project is to write a program that does something or other - the details don&amp;#39;t matter. What matters is that our project architecture is what&amp;#39;s under scrutiny. At least, more so.&lt;/p&gt;

&lt;p&gt;In past projects, the project architecture was prescribed to us. We were to have a specific API for specific functions, and that&amp;#39;s it. Here we design the API, and the project is big enough that it isn&amp;#39;t crazy to have multiple components.&lt;/p&gt;

&lt;p&gt;For instance, in the Allocator project, we had to lay out the heap in a specific way and perform specific actions when allocate and deallocate are called.&lt;/p&gt;

&lt;p&gt;Now I&amp;#39;m in a tough position when I answer questions on the class discussion board (Piazza). People will ask, &amp;quot;can I build class XYZ like such-and-such?&amp;quot;&lt;/p&gt;

&lt;p&gt;The answer is yes, always. You can do whatever you want. In past projects, it was the case that you couldn&amp;#39;t - you had to do it a specific way, like in the Allocator project.&lt;/p&gt;

&lt;p&gt;The answer is that you shouldn&amp;#39;t, ninety percent of the time.&lt;/p&gt;

&lt;p&gt;So how do you answer the queston? On the one hand, there really isn&amp;#39;t a single &amp;quot;right&amp;quot; or &amp;quot;best&amp;quot; answer. On the other hand, some answers are substantively worse than others. In my algorithms class, there was an uproar because of two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This was that teacher&amp;#39;s first semester, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We&amp;#39;re expected to know English.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a sense, design is like the English language - it&amp;#39;s highly subjective. Should I use hyphens and rhetorical questions? (or, heck, should I even parenthesize?) A lot of people enjoy in classes easy tests and objective grading. These are both antithetical to programming, the first one on more personal grounds.&lt;/p&gt;

&lt;p&gt;Code can be written densely, with single-letter variables and no comments. Or it can be written overly verbosely, with twenty lines of comments for every line of source and every variable is named something like the&lt;em&gt;iterator&lt;/em&gt;for&lt;em&gt;the&lt;/em&gt;loop&lt;em&gt;which&lt;/em&gt;counts&lt;em&gt;to&lt;/em&gt;n.&lt;/p&gt;

&lt;p&gt;Each of these pieces of code can be equally valid, trivially producing identical machine code. But both of these are bad code, and there is a happy middle ground. I have never seen this middle ground quantified in a code quality grade.&lt;/p&gt;

&lt;p&gt;A lot of classes (including this class, OOP) dedicate a few points for code quality. But I&amp;#39;ve never heard of losing points for that. I don&amp;#39;t remember ever losing points for that, and I&amp;#39;ve written some pretty gnarly code. The people who I&amp;#39;ve known who have lost points on &amp;quot;code quality&amp;quot; typically went and whined at the professor and got their points back.&lt;/p&gt;

&lt;p&gt;So this class claims to be focusing at least in part on the design. The lectures do, don&amp;#39;t get me wrong. But we&amp;#39;ll see whether it gets graded objectively.&lt;/p&gt;

&lt;p&gt;Of course, one problem with subjective grading is that we have a class of a million people (it seems). So there&amp;#39;s that.&lt;/p&gt;

&lt;p&gt;Tip Of The Week: Spectre comes out on Thursday! We&amp;#39;ll see if Voldemort/M is everything he&amp;#39;s cracked up to be.&lt;/p&gt;

&lt;p&gt;Wait, wrong tip of the week. Let&amp;#39;s try that again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mp3gain.sourceforge.net/&quot;&gt;http://mp3gain.sourceforge.net/&lt;/a&gt; is a program that will losslessly volume-equalize a folder full of MP3 files. It even works on Linux.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll let the reader guess how these two are related.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/11/01/design.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/11/01/design.html</guid>
        
        
      </item>
    
      <item>
        <title>Spring 2016</title>
        <description>&lt;p&gt;Dear Reader,&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re reading this, then you&amp;#39;re either taking this class in Fall 2015 or you&amp;#39;re considering taking it this coming Spring, 2016.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re considering registering for CS371p, Object Oriented Programming with Downing, G., then good for you. You&amp;#39;re going to learn C++.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all I can promise you. This is either good news or bad news, depending on your opinions.&lt;/p&gt;

&lt;p&gt;Dr. Downing does an excellent job teaching C++, and is truly an excellent lecturer in many ways. The projects are easy, and the tests are straightforward, so if these are qualities that you like in a class then by all means take it.&lt;/p&gt;

&lt;p&gt;If you want to learn about anything other than C++, then abandon all hope, ye you enter here. This is not a theory class, do not expect to learn anything that can be applied anywhere else. If you are of the opinion that going to lecture for 3 hours a week to learn a new programming language is silly, because either a) you think that juniors in a CS program should be able to pick up a new language without someone spoon-feeding it to them, or b) you think that C++ will be obsolete in a few years, then don&amp;#39;t take this class.&lt;/p&gt;

&lt;p&gt;If you think (b), then our hopes are aligned, but unfortunately far-fetched. C++ has been around longer than you or I.&lt;/p&gt;

&lt;p&gt;So, there you have it. These are my thoughts on the class shrunk to 250 words.&lt;/p&gt;

&lt;p&gt;Tip of the Week: &lt;a href=&quot;http://www.multicore-association.org/workgroup/mpp.php&quot;&gt;http://www.multicore-association.org/workgroup/mpp.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ability to program multi-core systems is crucial as humanity hits the computational speed barrier. We&amp;#39;re at 16nm now in iPads, chips can only become so small. A group of people got together and made this platform-agnostic guide to programming on multi-core systems. It condenses the material well if you&amp;#39;re into that sort of thing (namely, programming for performance).&lt;/p&gt;

&lt;p&gt;Unfortunately, you do have to give them your email address to get the PDF. It&amp;#39;s probably elsewhere on the internet if you searched around, though.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/25/registration.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/25/registration.html</guid>
        
        
      </item>
    
      <item>
        <title>Participado Potato</title>
        <description>&lt;p&gt;Little to report this week. I was unable to attend class on Monday because I was physically ill, so I can&amp;#39;t report on what shenanigans happened that day.&lt;/p&gt;

&lt;p&gt;We got the scores back for the test, so that&amp;#39;s good. I did approximately as well as I figured I would, so no complaints there.&lt;/p&gt;

&lt;p&gt;Refresher: Downing will, throughout the lecture (in fact, for the majority of the lecture), call on students and ask them questions about code, carefully probing their knowledge about the code snippet.&lt;/p&gt;

&lt;p&gt;On Wednesday, Professor Downing called on me in class and we talked about how constructors and destructors are used in arrays. This is noteworthy in part because he called on me last week as well. Last week I was the recipient of a 15 minute conversation about Java&amp;#39;s nested class system as compared to C++&amp;#39;s (or maybe vice-versa). I don&amp;#39;t know how Downing decides who to call on next, but I have noticed that his die seems to land on me unusually often...&lt;/p&gt;

&lt;p&gt;What&amp;#39;s surprising to me is that not everybody loves this part of class the most. There exist (hypothetical, I&amp;#39;m not naming names) people who, when called on, refuse to raise their hands and will hide. On the one hand, I can understand this, the first time I was called on I was nervous.&lt;/p&gt;

&lt;p&gt;But on the other hand, it&amp;#39;s an opportunity for someone who gets paid on the order of $161 an hour [1] to personally explain to you some part of how C++ works, and you don&amp;#39;t even have to show up to office hours.&lt;/p&gt;

&lt;p&gt;Also, it&amp;#39;s good practice to speak in public about code, which is nothing if not important. Confidence is a good thing to build.&lt;/p&gt;

&lt;p&gt;With that, I leave you with my Tip of the Week: Learn to write well [2]. Proofread your work, ideally have a friend do so as well, and most importantly, read other people&amp;#39;s writing. Nothing is more frusterating than having to read something that was poorly written.&lt;/p&gt;

&lt;p&gt;[1] Judging from &lt;a href=&quot;https://sp.austin.utexas.edu/sites/ut/rpt/Documents/IMA_FS_AvgFacSalColRankEXP_2013_AY.pdf&quot;&gt;the University of Texas at Austin Average Faculty Salaries, Headcount, and FTE&lt;/a&gt;. Average salary of a Computer Science professor is $145 thousand annually. Professor Downing teaches four classes, for a total of 10 credit hours, and he approximately doubles that time in office hours, so he works at least 20 hours a week (I don&amp;#39;t count grading and preparing for class and all that stuff, but he has a team of people to do some of that for him). Figuring he works 50 weeks a year, it comes out to around $161 hourly.&lt;/p&gt;

&lt;p&gt;[2] I used to have a lead-in to this topic that involved international terrorists, Hitler, and President Clinton. It was too long, though, so you&amp;#39;ll just have to imagine what it was.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/18/cameras.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/18/cameras.html</guid>
        
        
      </item>
    
      <item>
        <title>Check, 1, 2, 3...</title>
        <description>&lt;p&gt;A few things of importance happened this week: We had the first test.&lt;/p&gt;

&lt;p&gt;The test was, I thought, a reasonable test. Last semester in 439 our tests lacked code. The questions were all conceptual, and in general asked us to apply what we had learned in class to given problems. For example a question might be analogous to &amp;quot;How would you design a file system for a given system?&amp;quot;&lt;/p&gt;

&lt;p&gt;I liked those tests, because if there&amp;#39;s one thing I don&amp;#39;t see a lot of in CS classes it&amp;#39;s system design.&lt;/p&gt;

&lt;p&gt;However, this test was the exact opposite. It was entirely code. There were five questions, and each was of the form &amp;quot;write a function/class that conforms to these unit tests.&amp;quot;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m of two minds on this type of test. On the one hand, it tests knowledge of syntax and whatnot. That&amp;#39;s certainly important, but on the test I made a critical mistake that having a compiler would have caught immediately (an off-by-one error that would cause an out-of-bounds access, if you must know).&lt;/p&gt;

&lt;p&gt;Hopefully my comment here doesn&amp;#39;t cause the people grading the test to realize they missed something and go back to re-grade it down.&lt;/p&gt;

&lt;p&gt;On the other hand, though, it is claimed that the test is largely graded by computer. Which is awesome. Frankly though, if the test can be graded largely by computer, then I think maybe it&amp;#39;s better suited for an Intro to Programming class. We&amp;#39;re largely Juniors and Seniors, I think, we should all know how to make a program compile. The big issue is stylistic stuff.&lt;/p&gt;

&lt;p&gt;I will reserve any judgement until we see how the test was graded. If they count off for semicolons than the acid rain of my criticism will scour the planet clean of life forms [1].&lt;/p&gt;

&lt;p&gt;Tip of the Week: Don&amp;#39;t commit non-source files to git, and don&amp;#39;t commit large binary files to git. These just clog up your repo.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve already said that, so I will have a Tip of the Week 2: Know how your VCS of choice works. In particular: &lt;a href=&quot;https://developer.atlassian.com/blog/2015/01/a-better-pull-request/&quot;&gt;https://developer.atlassian.com/blog/2015/01/a-better-pull-request/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[1] If it hasn&amp;#39;t already. A colleague of mine once described my writing as &amp;quot;dripping with hatred&amp;quot;, which wasn&amp;#39;t really what I was going for. Maybe that explains why another friend of mine (&lt;a href=&quot;https://www.youtube.com/watch?v=_Avn2nT16FA&quot;&gt;Emperor Palpatine&lt;/a&gt;) really liked my blog posts.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/10/columbine.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/10/columbine.html</guid>
        
        
      </item>
    
      <item>
        <title>The Minority Report</title>
        <description>&lt;p&gt;The creator of C++ (Bjarne Stroustrup) once said: &amp;quot;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&amp;quot;&lt;/p&gt;

&lt;p&gt;This week we covered more about templates and we started covering lambda functions.&lt;/p&gt;

&lt;p&gt;I personally like lambda functions. Sometimes, it is handy to have a full function that you can toss around to different functions. The C++ standard library&amp;#39;s accumulat() and all_of() functions both take a function as a parameter. In a language like Python that lambda would be restricted to a single statement, and scoping becomes a little less clear. C++ fixes these problems and allows arbitrarily sized lambdas with clearly scoped variables.&lt;/p&gt;

&lt;p&gt;Unfortunately, lambdas went the way of templates, and maybe could&amp;#39;ve had a little more thought put into them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;

function&amp;lt;int(int)&amp;gt; foo()
{
  int i = 2;
  return [&amp;amp;i] (int x) -&amp;gt; int {return i+x+1;};
}

int main(int argc, char **argv)
{
  function&amp;lt;int(int)&amp;gt; fn = foo();
  cout &amp;lt;&amp;lt; fn(5) &amp;lt;&amp;lt; endl;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prints out 6 on my machine. There are many camps on language design. The camp I belong to believes that the language should protect the coder in a case like this, using what JavaScript does with closures or Python with reference counting.&lt;/p&gt;

&lt;p&gt;This blog is about the class, not the language, so I shall tie it together: This class is making me think about language design more than any other class I&amp;#39;ve taken. I don&amp;#39;t like C++. But the professor makes an argument for it, and it makes me think hard about what it is that I like and don&amp;#39;t like in languages.&lt;/p&gt;

&lt;p&gt;This is one thing I like about this class. It makes you to think.&lt;/p&gt;

&lt;p&gt;Tip of the Week: Have experience writing big projects from scratch (&amp;gt;2000 lines, and multiple files). Most classes value good code but don&amp;#39;t teach architecture, but having a good architecture is more important. Good architecture leads to good code. Bad architecture leads to code that has to work around the program it&amp;#39;s living in, and it becomes more of a headache the further you get down the line.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/10/04/interface.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/10/04/interface.html</guid>
        
        
      </item>
    
      <item>
        <title>Sillyscopes!</title>
        <description>&lt;p&gt;Our good friend Glenn Downing (who also happens to teach this class) read my previous post on this blog and pointed to:
[&lt;a href=&quot;http://codeforces.com&quot;&gt;http://codeforces.com&lt;/a&gt;]
and
[&lt;a href=&quot;https://www.hackerrank.com&quot;&gt;https://www.hackerrank.com&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;He teaches a competitive programming course which uses codeforces.com, and that website looked pretty cool.&lt;/p&gt;

&lt;p&gt;We venture forward to this most recent week. This week we got our running grades for the semester back.&lt;/p&gt;

&lt;p&gt;Most classes would give you just a single number, your average score. That number usually ends up being meaningless anyways because they&amp;#39;re averaged poorly or because of curves.&lt;/p&gt;

&lt;p&gt;In this class we got not only our points, but our Z-score in the class (standard deviations above or below the mean) as well as our class rank.&lt;/p&gt;

&lt;p&gt;There are 78 people who are better than me. It was 77 this morning, but then someone got another point or something. Oddly there weren&amp;#39;t any grades entered, that I&amp;#39;m aware of. One wonders.&lt;/p&gt;

&lt;p&gt;This is a class where the rich get richer, and the poor get poorer, because the rich prey on the poor.&lt;/p&gt;

&lt;p&gt;There are those who can write beautiful code right out of the box. Their code is modular, short, relatively clear, and works. When they write test cases, they cover the corners. Their code is bullet-proof.&lt;/p&gt;

&lt;p&gt;Then there are those who... maybe aren&amp;#39;t quite there yet. Their code is cobbled together and has a few bugs. Maybe they didn&amp;#39;t quite think of everything in their tests.&lt;/p&gt;

&lt;p&gt;This class has a system where your program is run against the acceptance test of a randomly chosen student. If your program fails, you lose two points and they gain two points. This is repeated 5 times (you can lose or gain up to 10 points).&lt;/p&gt;

&lt;p&gt;The people at the top will be more likely to get points than those at the bottom. This is fine, but it&amp;#39;s very cutthroat (which is why I dislike competitive programming).&lt;/p&gt;

&lt;p&gt;I got two points from this system. I like having more points. But along the way I put down 5 people (1 person lost 2 points because of me, and I passed ~4 people in the class rank).&lt;/p&gt;

&lt;p&gt;Personally, I feel like directly transferring points from worse students to better students works against the goal. The goal is for everyone to learn - and ideally everyone helps everyone learn. With this point system now we have a reason to not help (nay, mislead) our fellow students. With a class this big (~170 people), people are faceless and it&amp;#39;s hard to feel guilty.&lt;/p&gt;

&lt;p&gt;Tip of the Week: Keep track of why you do things.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m in CS378 Embedded Systems with Dr. Oshana, which is the best class ever and you should totally ditch OOP and go for it [1], but this week we&amp;#39;re doing a project wherein we have to write a command line interpreter for an embedded system (via UART). Somebody on the class discussion forum was getting an error code which I vaguely recognized. I looked at what I had done and noticed this line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;         console_printf(&amp;quot;%s &amp;quot;, g_command_line.prompt);
-    } else if (c == &amp;#39;\b&amp;#39;) {
+    } else if (c == &amp;#39;\b&amp;#39; || c == 127) {
        if (g_command_line.buffer_cursor &amp;gt; g_command_line.buffer) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I must have changed something about backslash. But for the life of me, I don&amp;#39;t remember what I changed or why.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s no use to anybody else.&lt;/p&gt;

&lt;p&gt;So, use version control and issue tracking. It&amp;#39;ll save you from having to remember.&lt;/p&gt;

&lt;p&gt;[1] I might be biased because I like C and robots and I don&amp;#39;t like C++. One class has C and robots (well, a smart car) and the other has C++. My biases should be obvious.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/09/26/sillyscopes.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/09/26/sillyscopes.html</guid>
        
        
      </item>
    
      <item>
        <title>Hot, or Not?</title>
        <description>&lt;p&gt;This week we got our second project, and our first pair project. The goal of the project is to implement Range voting, which is what&amp;#39;s used on the &amp;quot;Hot or Not&amp;quot; website.&lt;/p&gt;

&lt;p&gt;As week 4 draws to a close, I realize that the class won&amp;#39;t change drastically enough for me to have much to say about it. I&amp;#39;m still on the fence about whether I would recommend this class (which is the point of this blog - to give my impression of the class).&lt;/p&gt;

&lt;p&gt;Today, I will talk about those online programming challenge websites. I have never been a fan of these, especially with the open-loop debugging style where the website says &amp;quot;you have a bug!&amp;quot; but doesn&amp;#39;t tell you what triggered it. On top of that, I have never been impressed by the challenges that they offer - many I find trivial to implement, let alone being a challenge.&lt;/p&gt;

&lt;p&gt;There are two exceptions to this, though. One is &lt;a href=&quot;http://www.usaco.org/&quot;&gt;USACO&lt;/a&gt;, the other is &lt;a href=&quot;https://projecteuler.net/archives&quot;&gt;Project Euler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;USACO has the property that they stress good algorithm design - your algorithm has to be the most efficient, or else you will time out. Take the Voting project for example - the input is limited to 20 candidates and 1000 ballots. Your algorithm could be exponential time in the number of candidates without the program timing out.&lt;/p&gt;

&lt;p&gt;I was never any good at USACO because of this. I have the bad habit of writing code that works. This is a terrible habit to get into, for the reason above: I don&amp;#39;t pay attention to the quality of the algorithm. I frankly don&amp;#39;t care whether our submission to the Voting project is exponential in the number of candidates. But I should care deeply. USACO was the first place I encountered where I had to care or lose.&lt;/p&gt;

&lt;p&gt;Typically I lost anyway, but that&amp;#39;s beside the point.&lt;/p&gt;

&lt;p&gt;The other one is Project Euler, which is the same thing but for math rather than programming. Full disclosure: I&amp;#39;ve only done one or two of the easiest problems. Point is, both require you to think beyond the mechanics of the code to the strategy. We&amp;#39;ve all been programming for at least a year (assuming you didn&amp;#39;t take 312, took 314 a year ago, and took 429 last semester), code mechanics shouldn&amp;#39;t be the focus. Algorithms should be.&lt;/p&gt;

&lt;p&gt;Incidentally, I&amp;#39;m also taking CS 331, &amp;quot;Algorithms Design &amp;amp; Complexity&amp;quot;, this semester.&lt;/p&gt;

&lt;p&gt;Consejo de la Semana: Know the problem domain. I&amp;#39;m taking Embedded Systems Development this semester. One of our projects is to build an accurate stopwatch, controlled over a serial console. The instinctive route is to use a hardware timer, but it turns out that the best route is to simply time the device and tweak cycle counts. Programming embedded requires an appropriate mindset, as does programming for the web or local machines or anything else.&lt;/p&gt;

&lt;p&gt;Much like the example above with USACO. On USACO you have to be keenly aware of time constraints. Less so with some arbitrary class project.&lt;/p&gt;

&lt;p&gt;A classmate of mine posted a link to an article Joel Spolsky wrote about this:
[&lt;a href=&quot;http://www.joelonsoftware.com/articles/FiveWorlds.html&quot;&gt;http://www.joelonsoftware.com/articles/FiveWorlds.html&lt;/a&gt;]&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/09/20/cats.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/09/20/cats.html</guid>
        
        
      </item>
    
      <item>
        <title>Control The Source, Luke.</title>
        <description>&lt;p&gt;We got Labor Day off this week, so we only had two classes. An alumni from UT who now works at Bloomberg came and gave a talk on Wednesday, so we really only had one class.&lt;/p&gt;

&lt;p&gt;I only had two classes last week as well, but that&amp;#39;s because I was in Virginia. Everyone else (give or take) had three classes.&lt;/p&gt;

&lt;p&gt;One thing that occurs in this class is that outside speakers are brought in to talk about life after UT. So on Wednesday we had an outside speaker who talked about his life at Bloomberg. He gave some tips about resumes and interviewing, so that was handy. Of course, the talk had a certain slant towards us applying to Bloomberg. It seems like a nice place, but I&amp;#39;m not sure NYC is cut out for me. They probably have tighter UAV laws - Austin has plenty of open fields which will let you fly UAVs on them, so maybe this summer I&amp;#39;m going to stay in Austin again.&lt;/p&gt;

&lt;p&gt;We didn&amp;#39;t do much on Friday, we just talked about exceptions. We also mentioned pass-by-reference, but that is a rant that I will save for another (slower) day. I already have a rant for today.&lt;/p&gt;

&lt;p&gt;We finished the Collatz project this week. I have little to say about the project that I haven&amp;#39;t said already: it tries to teach us tools by forcing us to use them without any rationale (see my prior rant on issue tracking).&lt;/p&gt;

&lt;p&gt;For instance, I believe that source control should be used to control source. It is not a tool to control built files.&lt;/p&gt;

&lt;p&gt;Doxygen is a tool that generates documentation. The documentation comes from comments in the source code of files, and Doxygen can be controlled using a Doxyfile much like how make is controlled with a Makefile. Doxygen generates HTML documentation and plops it into a html/ directory.&lt;/p&gt;

&lt;p&gt;Proper use of source control, I think most people would agree, would be to commit the source code and the Doxyfile, and not the html/ directory. The html/ directory is generated, and committing it would be like committing a compiled binary.&lt;/p&gt;

&lt;p&gt;But alas, the project requirements require us to commit the html directory and not the Doxyfile, even though we hand-modified the Doxyfile.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s the lesson we&amp;#39;re being taught? I don&amp;#39;t know. I hear people say that we are being taught valuable lessons that will apply to industry.&lt;/p&gt;

&lt;p&gt;To be honest, if I were an employer, I would rather hire someone who had never heard of git but was able to learn than someone who knows the git commands but commits binary files and random log files. It doesn&amp;#39;t take much time to pick it up. Everyone in this class picked it up in the span of a week (or dropped the class).&lt;/p&gt;

&lt;p&gt;Which brings me to...&lt;/p&gt;

&lt;p&gt;Tip of the Week: Don&amp;#39;t blindly use git add -A before every commit. You will eventually grab all manner of binary files, temporary log files, test files, editor scratch files, and so forth. When you do eventually grab those files, you inconvenience everyone else.&lt;/p&gt;

&lt;p&gt;Story time: In Spring of 2015 I had Dr. Rellermeyer for Operating Systems. There was a big final project for the second half of the semester, which was to build an operating system that would run on an ARM chip (Raspberry Pi, in particular).&lt;/p&gt;

&lt;p&gt;That project was unlike any other class project. We were essentially a pretend company - Dr. Rellermeyer was a customer, who said &amp;quot;I need an OS that can run a binary&amp;quot;. The rest of us self-organized to accomplish that goal, like any real-world company [1].&lt;/p&gt;

&lt;p&gt;There were two dozen of us working on the project, all frantically compiling the code and trying to get it to work. One day somebody accidentally pushed the binary executable and 20MB of log file. For the next week, everybody got a nasty case of merge hell, because the binary changes on every commit. On top of that, they would overwrite their own binary whenever they pulled from the repo, and then spend forever trying to figure out why their code didn&amp;#39;t seem to be running.&lt;/p&gt;

&lt;p&gt;To rub salt in the wound, ever since the repo takes roughly forever to pull.&lt;/p&gt;

&lt;p&gt;I think eventually someone got around to rebasing it, but rebasing public history is nothing but pain.&lt;/p&gt;

&lt;p&gt;Moral of the story: If you didn&amp;#39;t add or remove any files in your commit, don&amp;#39;t run git add -A. git add individual files, or use git commit -am&amp;quot;commit message&amp;quot;.&lt;/p&gt;

&lt;p&gt;[1] I guess real-world companies usually start with 1 or 2 people and add more, rather than starting unorganized with 20 people, but maybe we&amp;#39;re talking about a company that had grown to ~100 people and ~20 interns before smart buses eliminated everyone who wasn&amp;#39;t a fresh intern.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/09/12/projects.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/09/12/projects.html</guid>
        
        
      </item>
    
      <item>
        <title>The Collatz Algorithm</title>
        <description>&lt;p&gt;First off, shameless plug. Fill out the XKCD survey if you haven&amp;#39;t already:
[&lt;a href=&quot;https://docs.google.com/forms/d/1PhEmGqYI84n6WmqifWf8ExLNe3EVBLcBPs1owYXWfPs/viewform?c=0&amp;amp;w=1&quot;&gt;https://docs.google.com/forms/d/1PhEmGqYI84n6WmqifWf8ExLNe3EVBLcBPs1owYXWfPs/viewform?c=0&amp;amp;w=1&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Week two of my experience in CS371p (Object Oriented Programming). This week we started our first project, a program to find the longest Collatz chain within a range of numbers.&lt;/p&gt;

&lt;p&gt;Not a difficult problem to solve by any stretch of the word.&lt;/p&gt;

&lt;p&gt;But the difficulty in the project lies not in the programming. It lies in the paperwork around the project that we have to do. The goal of this class is not to learn object oriented programming, but to learn the tools of the trade: Git, continuous integration, unit tests, issue tracking, and so forth.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know what the right way to teach these things is. I personally learned them through using them - I went to work at a company. The company used tool XYZ. I learned tool XYZ. I learned Git at WP Engine. I learned testing at Click Security (despite what they may tell you). Even though L5 proved beyond a doubt that freelancing was not what I was meant for, I learned many valuable lessons there about ethics and timekeeping and tests and documentation etc.&lt;/p&gt;

&lt;p&gt;In each of these cases, though, I was in the real world using the tools. I learned how to use issue tracking in a world where we had to track thousands of issues at the same time quickly and efficiently or else the company would fold under its own weight.&lt;/p&gt;

&lt;p&gt;The class attempts to teach issue tracking by forcing us to use an issue tracker. Naively, you might think that&amp;#39;s great. But we&amp;#39;re forced to file a certain number of issues, on a project which we&amp;#39;re working alone on. Issue trackers are not built to track issues, tracking issues is easy and any programmer worth giving a keyboard knows how to keep a TODO list of issues. I personally use a text file, some use post-it notes. Some use an issue tracker for that, there&amp;#39;s nothing wrong with that.&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s be honest, it takes about a second to learn how to use the Github issue tracker.&lt;/p&gt;

&lt;p&gt;The real power of issue tracking is in coordinating people. Imagine you work in a company of about 120-130 people. There are maybe a half-dozen technical teams at said company. Now imagine you are working on a problem where people with Italian names don&amp;#39;t appear in the final product. (by the way, the product consists of a data pipeline where data is piped from the customer, through machinery, and then gets moved to the product team&amp;#39;s territory) You are the person responsible for fixing the problem. What do you do?&lt;/p&gt;

&lt;p&gt;You probably try to identify the problem in the part you have control over, the data pipeline. You look through it, make some notes, and then posit that it is a problem with the product team. So you go over to Jill&amp;#39;s desk and tell her, &amp;quot;Hey, I&amp;#39;ve been working on bug XYZ.&amp;quot; You tell her what you know, she writes it on a post-it, and you part ways as happy workfellows.&lt;/p&gt;

&lt;p&gt;A couple weeks later, maybe it&amp;#39;s on a Wednesday and the company catered BBQ that day. You sit down to your ribs, and Greg sits down across from you and asks, &amp;quot;Hey, so is bug XYZ fixed?&amp;quot;&lt;/p&gt;

&lt;p&gt;You reply, &amp;quot;Dude, I&amp;#39;m eating BBQ, buzz off.&amp;quot;&lt;/p&gt;

&lt;p&gt;Just kidding. You reply, &amp;quot;I don&amp;#39;t know, I gave that to Jill.&amp;quot;&lt;/p&gt;

&lt;p&gt;Greg thanks you and goes to Jill. Jill says she gave it to Jimbo. Jimbo gave it to Kat. Kat got married last weekend and will be off the grid on her honeymoon until late next week.&lt;/p&gt;

&lt;p&gt;So now nobody knows if it&amp;#39;s been fixed. Maybe Kat fixed it but hasn&amp;#39;t committed it yet. Maybe she&amp;#39;s halfway fixed it. Maybe she gave it to someone else in the company.&lt;/p&gt;

&lt;p&gt;Enter the infomercial voiceover. &amp;quot;If you&amp;#39;ve ever had problems like these... Try issue tracking! &lt;small&gt;May cause heart problems or temporary insanity. See your doctor for details.&lt;/small&gt;&amp;quot;&lt;/p&gt;

&lt;p&gt;This is what issue tracking is for, and the in-class projects are (so far) a poor representation of that.&lt;/p&gt;

&lt;p&gt;Note that I&amp;#39;m not espousing any particular way that I think issue tracking should be taught. I think it is impractical for everyone to learn on the job. I have long thought that programming should be taught via a single, large, open-source project. You are graded based on your contributions. End of story.&lt;/p&gt;

&lt;p&gt;Tip of the week: Know the &amp;quot;bus factor&amp;quot;: It&amp;#39;s the number of people that can be hit by a bus before the project fails. A larger number is better. That way, no one person is in charge of too much - if the bus factor is 1 or 2 in a large company (&amp;gt;20 people), then maybe their job encompasses too much.&lt;/p&gt;

&lt;p&gt;As always, assume the buses are smart and malicious.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs371p-web/busfactor.jpg&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/09/06/hotels.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/09/06/hotels.html</guid>
        
        
      </item>
    
      <item>
        <title>First Post</title>
        <description>&lt;p&gt;Welcome to the class.&lt;/p&gt;

&lt;p&gt;They say that a first impression is the strongest impression. I&amp;#39;m currently reading the book &amp;quot;Blink&amp;quot;, by Malcolm Gladwell (author of &amp;quot;The Tipping Point&amp;quot;), which speaks only of this phenomenon for 300 pages. A good read, actually, I highly recommend it, though it does come off a little bit like Stephan Wolfram&amp;#39;s book &amp;quot;A New Kind of Science&amp;quot; (which is also worth reading).&lt;/p&gt;

&lt;p&gt;I digress. What does this have to do with Professor Downing&amp;#39;s class, CS 371P (Object Oriented Programming) at UT?&lt;/p&gt;

&lt;p&gt;Glenn Downing is an award-winning teacher. He&amp;#39;s worked at JPL, Los Alamos, and MCC, he&amp;#39;s won three teaching awards, and he holds a patent in a &amp;quot;System and method for initializing variables in an object-oriented program&amp;quot;. He has a daughter that he&amp;#39;s very proud of, he seems like a great guy to be around, your typical case for teacher of the year.&lt;/p&gt;

&lt;p&gt;Except that he&amp;#39;s wrong.&lt;/p&gt;

&lt;p&gt;Fair warning: I have a personal bias against C++, and I have a personal bias against people who put their curly braces after their return statement:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;int main() {
   cout &amp;lt;&amp;lt; &amp;quot;Hello, world!&amp;quot; &amp;lt;&amp;lt; endl;
   return 0;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How can I trust a Lisp programmer? Although I guess if it were in true Lisp form it&amp;#39;d look more like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(&amp;lt;&amp;lt; (&amp;lt;&amp;lt; cout &amp;quot;Hello, world!&amp;quot;) endl)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m clearly not a Lisp coder, though.&lt;/p&gt;

&lt;p&gt;But on a serious note, putting code into a header file is wrong. It leads to multiple dependency errors in large projects, in the case where you have 2 C++ files, each of which includes the same header, and then the two C++ files are later linked together. Also it&amp;#39;s inefficient, because a change to the code results in recompiling every file that included it, and so forth. I did a quick internet search using Google and someone mentioned cyclical dependencies, which is a good point.&lt;/p&gt;

&lt;p&gt;In the particular case of the class, it only became an issue because of the way gcov aggregates its statistics on a per-file basis, and the makefile for the class was checking the C++ file for the coverage statistics of the function in question, not the header file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gcov -b ./Coverage2.c++ | grep -A 5 &amp;quot;File &amp;#39;Coverage2.c++&amp;#39;&amp;quot;
instead of:
$ gcov -b ./Coverage2.c++ | grep -A 5 &amp;quot;File &amp;#39;Collatz2.h&amp;#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So there&amp;#39;s that. To be fair, it is just one example (four, actually), but strong C/C++ knowledge is not a prereq for this class, so some people may take the idea to heart.&lt;/p&gt;

&lt;p&gt;So while I take issue with the materials that have been presented thus far in class, the teaching style of the class is one I rather like. Professor Downing does the unique practice of calling on people in class and putting them on the spot. I think this practice is wonderful and should be in all classes - it forces a student to think, on the spot, about a problem, like a triage of sorts. I&amp;#39;m not a fan of competitive coding, hackathons, or that type of thing, because I find them too stressful of a hobby (if you want me to be stressed, you have to pay me, a prize is not money in the bank). But one thing that they teach is the ability to triage a situation and go in a direction, and not freeze or over-analyze.&lt;/p&gt;

&lt;p&gt;I should speak some words also about how this class seems to be emphasizing the tools more than the programming itself. Namely, Github, Travis CI, gcov, doxygen, etc. Personally I think any programmer worth their weight in gold [1] should be able to pick up these tools in any given weekend, so a class is pointless.&lt;/p&gt;

&lt;p&gt;So what I see is that I have issues with the material presented in class, but the material is at least well-taught. I opened talking about first impressions - we&amp;#39;ve only had two classes so far, and no homework or projects, so I&amp;#39;m going to keep an open mind and we&amp;#39;ll see how this next (first) project goes.&lt;/p&gt;

&lt;p&gt;A programming tip of the week: If you need to read 1.7 million images into Apache Spark, don&amp;#39;t use binaryFiles on a directory of 1.7 million files. binaryFiles will spend literally hours building a table of all the files and will eventually return an OutOfMemory exception. Instead, base64 encode the files into lines, and put each line into a big gzipped file, and read it with textFiles (you can also have several big gzipped files, and spread the little files across them). The gzipping almost offsets the size expansion of the base64 step, at least in my case.&lt;/p&gt;

&lt;p&gt;Even if you don&amp;#39;t need to load them into Spark, don&amp;#39;t put 1.7 million images into a flat directory anyway, because it takes several minutes to read the directory listing.&lt;/p&gt;

&lt;p&gt;[1] $16,524/LB at time of writing, $3.2 million for the average male and $2.7 million for the average female, which coincidentally matches the lifetime earnings of a male or female ($3.5 million and $2.9 million, respectively) with a PhD, according to &lt;a href=&quot;https://www2.ed.gov/policy/highered/reg/hearulemaking/2011/collegepayoff.pdf&quot;&gt;a 2009 report by the Georgetown University Center on Education and the Workforce&lt;/a&gt; page 10. New theory: Women are discriminated against not because of their gender, but because of their weight.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://lkolbly.github.io/cs371p-web/2015/08/30/first-post.html</link>
        <guid isPermaLink="true">http://lkolbly.github.io/cs371p-web/2015/08/30/first-post.html</guid>
        
        
      </item>
    
  </channel>
</rss>
